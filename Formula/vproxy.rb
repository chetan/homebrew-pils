# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Vproxy < Formula
  desc "zero-config virtual proxies with tls"
  homepage "https://github.com/jittering/vproxy"
  version "0.8"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/jittering/vproxy/releases/download/v0.8/vproxy_0.8_Darwin_arm64.tar.gz"
      sha256 "1ca59edef5526758b6a68d2b7f10beda261853785f3b8dccc95bb6307b8209f2"

      def install
        bin.install "vproxy"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/jittering/vproxy/releases/download/v0.8/vproxy_0.8_Darwin_x86_64.tar.gz"
      sha256 "fbd9eee699966209d226f9ce58bb4a5b3fc0c0527a03cb69ce40a12b8e7712c6"

      def install
        bin.install "vproxy"
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/jittering/vproxy/releases/download/v0.8/vproxy_0.8_Linux_arm64.tar.gz"
      sha256 "324865cb2efed37856facf4182ffb02efe31d7c0a9ff1b073e3b1997b9a5eb3e"

      def install
        bin.install "vproxy"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/jittering/vproxy/releases/download/v0.8/vproxy_0.8_Linux_x86_64.tar.gz"
      sha256 "f204a1d78065ecd6fc598e1efc3e253065e65cd8a2d6970bdf7b2d797cab6aae"

      def install
        bin.install "vproxy"
      end
    end
  end

  depends_on "mkcert"

  def post_install
    str = <<-EOF
# Sample config file
# All commented settings below are defaults

# Enable verbose output
#verbose = false

[server]
# Enable verbose output (for daemon only)
#verbose = false

# IP on which server will listen
# To listen on all IPs, set listen = "0.0.0.0"
#listen = "127.0.0.1"

# Ports to listen on
#http = 80
#https = 443


# CAROOT path
caroot_path = "#{var}/vproxy/caroot"

# Path where generated certificates should be stored
cert_path = "#{var}/vproxy/cert"

[client]
# Enable verbose output (for client only)
#verbose = false

#host = "127.0.0.1"
#http = 80

# Use this in local config files, i.e., a .vproxy.conf file located in a
# project folder
#bind = ""
EOF
str = str.gsub(/^[\t ]+/, "") # trim leading spaces
conf_file = "#{etc}/vproxy.conf"

# always write new sample file
File.open(conf_file+".sample", "w") do |f|
  f.puts str
end

# only create default conf if it doesn't already exist
if !File.exist?(conf_file) then
  File.open(conf_file, "w") do |f|
    f.puts str
  end
end

# setup var dir, if needed
if !File.exist?("#{var}/vproxy") then

  # Create/migrate caroot
  FileUtils.mkdir_p("#{var}/vproxy/caroot", 0755)
  mkcert_caroot = "#{`#{bin}/vproxy caroot --default`.strip}"
  if File.exist?(mkcert_caroot) then
    FileUtils.cp(Dir.glob("#{mkcert_caroot}/*.pem"), "#{var}/vproxy/caroot")
  else
    system("vproxy caroot --create")
  end

  # Create/migrate cert path
  old_cert_path = "#{ENV['HOME']}/.vproxy"
  if File.exist?(old_cert_path) then
    File.rename(old_cert_path, "#{var}/vproxy/cert")
  else
    FileUtils.mkdir("#{var}/vproxy/cert", 0755)
  end

end

  end

  def caveats; <<~EOS
    vproxy data is stored in #{var}/vproxy

    A local CA root was created at #{var}/vproxy/caroot;
      certs will be stored at #{var}/vproxy/cert when generated.

    See vproxy documentation for more info
  EOS
  end

  plist_options :startup => false

  def plist; <<~EOS
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>KeepAlive</key>
    <dict>
      <key>SuccessfulExit</key>
      <false/>
    </dict>
    <key>Label</key>
    <string>#{plist_name}</string>
    <key>ProgramArguments</key>
    <array>
      <string>#{bin}/vproxy</string>
      <string>daemon</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>WorkingDirectory</key>
    <string>#{var}</string>
    <key>StandardErrorPath</key>
    <string>#{var}/log/vproxy.log</string>
    <key>StandardOutPath</key>
    <string>#{var}/log/vproxy.log</string>
  </dict>
</plist>

  EOS
  end

  test do
    system "#{bin}/vproxy --version"
  end
end
