# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Vproxy < Formula
  desc "zero-config virtual proxies with tls"
  homepage "https://github.com/jittering/vproxy"
  version "0.6.4"
  bottle :unneeded

  if OS.mac?
    url "https://github.com/jittering/vproxy/releases/download/v0.6.4/vproxy_0.6.4_Darwin_x86_64.tar.gz"
    sha256 "abb88fe29f19f7523a1c1c934a4e5eccb66597e34349bcd22a29f3ced8c12d46"
  end
  if OS.linux? && Hardware::CPU.intel?
    url "https://github.com/jittering/vproxy/releases/download/v0.6.4/vproxy_0.6.4_Linux_x86_64.tar.gz"
    sha256 "49fa15003b133cffda6132f72f9498c1f9496a34e3804e2973e6ddc2b2b85de2"
  end
  if OS.linux? && Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
    url "https://github.com/jittering/vproxy/releases/download/v0.6.4/vproxy_0.6.4_Linux_arm64.tar.gz"
    sha256 "0b703551bb6f1b5044d707d80194c9f9ec079348a1ef1c63eb3e86c507461010"
  end

  depends_on "mkcert"

  def install
    bin.install "vproxy"
  end

  def post_install
    str = <<-EOF
# Sample config file
# All commented settings below are defaults

# Enable verbose output
#verbose = false

[server]
# Enable verbose output (for daemon only)
#verbose = false

# IP on which server will listen
# To listen on all IPs, set listen = "0.0.0.0"
#listen = "127.0.0.1"

# Ports to listen on
#http = 80
#https = 443


# The following paths are set explicitly to facilitate running as root

# mkcert's CAROOT path
# Set to output of `mkcert -CAROOT`
caroot_path = "#{`mkcert -CAROOT`.strip}"

# Path where generated certificates should be stored
cert_path = "#{ENV['HOME']}/.vproxy"

# Path to mkcert program
mkcert_path = "#{`which mkcert`.strip}"

[client]
# Enable verbose output (for client only)
#verbose = false

#host = "127.0.0.1"
#http = 80

# Use this in local config files, i.e., a .vproxy.conf file located in a
# project folder
#bind = ""
EOF

# only create if it doesn't already exist
conf_file = "#{etc}/vproxy.conf"
if File.exist?(conf_file) then
  File.open(conf_file, "w") do |f|
    f.puts str.gsub(/^[\t ]+/, "")
  end
end

# always write new sample file
File.open(conf_file+".sample", "w") do |f|
  f.puts str.gsub(/^[\t ]+/, "")
end

  end

  plist_options :startup => false

  def plist; <<~EOS
    <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>KeepAlive</key>
    <dict>
      <key>SuccessfulExit</key>
      <false/>
    </dict>
    <key>Label</key>
    <string>#{plist_name}</string>
    <key>ProgramArguments</key>
    <array>
      <string>#{bin}/vproxy</string>
      <string>daemon</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>WorkingDirectory</key>
    <string>#{var}</string>
    <key>StandardErrorPath</key>
    <string>#{var}/log/vproxy.log</string>
    <key>StandardOutPath</key>
    <string>#{var}/log/vproxy.log</string>
  </dict>
</plist>

  EOS
  end

  test do
    system "#{bin}/vproxy --version"
  end
end
